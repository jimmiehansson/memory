'use strict';

/**
 * This notation was generated by templates.
 * // -------------------------------------------------
 * GLOBAL FILE NOTATIONS
 * Project of: memory
 * Filename: board.js by jimmie
 * Created: 2017-05-31 @ 14:54
 * Product of: memory
 * // -------------------------------------------------
 * Make sure this file is part of its proper namespace
 * and project before moving on.
 * // -------------------------------------------------
 * Code-tags conventionally should be used (See below) :
 * TODO - Something that someone need to do.
 * DOING - Self remind for what you are doing.
 * CONSIDER - Reminder to consider a change or addition.
 * BUG - The below section of a code cause a bug.
 * FIXME - The below section of code need to be fixed.
 * HACK - The below section of code is a workaround.
 * XXX - Any notation important enough to consider implementing.
 * CLARIFY - Very incomprehensible section of code below.
 *
 * Created by jimmie on (2017-05-31).
 *
 * Repository link: https://github.com/jimmiehansson/memory.git
 */


/**
 * DOING: Import test associated libraries
 * here to separate from the rest of the code.
 */
const mocha = require('mocha');
const chai = require('chai');
const sinon = require('sinon');


mocha.describe('Testing file: /js/client/src/actions/board.js', () => {


    let testScope = require('../../../../../js/client/src/actions/board');
    let testLibrary = require('../../../../../js/client/src/constants/action-types/board');


    mocha.describe('Behaviors @action->getBoardState::function', () =>{

        let data = {
            payload : {},
            type : testLibrary.GET_BOARD_STATE
        };

        mocha.describe('Assert normal', () => {
            mocha.it('should return an action object with correct members', ()=> {
                chai.expect(testScope.getBoardState({})).to.deep.equal(data);
            });
            mocha.it('should not return an empty object', ()=> {
                chai.expect(testScope.getBoardState({})).to.not.equal({});
            });
            mocha.it('should have object member @type', ()=> {
                chai.expect(testScope.getBoardState({})).to.deep.property('type');
            });
            mocha.it('should have object member @payload', ()=> {
                chai.expect(testScope.getBoardState({})).to.deep.property('payload');
            });

        });

        mocha.describe('Assert error', () => {
            mocha.it('should not return a string when passed a string', ()=> {
                chai.expect(testScope.getBoardState('')).to.not.deep.equal('string');
            });
            mocha.it('should not return a number when passed a number', ()=> {
                chai.expect(testScope.getBoardState(100)).to.not.deep.equal(100);
            });
            mocha.it('should not return a boolean when passed a boolean', ()=> {
                chai.expect(testScope.getBoardState(true)).to.not.deep.equal(true);
            });
            mocha.it('should not return an array when passed an array', ()=> {
                chai.expect(testScope.getBoardState([])).to.not.deep.equal([]);
            });
        });
    });


    mocha.describe('Behaviors @action->boardState::function', () =>{

        let data = {
            payload : {},
            type : testLibrary.GET_BOARD_STATE
        };

        mocha.describe('Assert normal', () => {
            mocha.it('should not return an action object', ()=> {
                chai.expect(testScope.boardState({})).to.not.equal(data);
            });
        });

        mocha.describe('Assert error', () => {
            mocha.it('should not return a string when passed a string', ()=> {
                chai.expect(testScope.boardState('')).to.not.deep.equal('string');
            });
            mocha.it('should not return a number when passed a number', ()=> {
                chai.expect(testScope.boardState(100)).to.not.deep.equal(100);
            });
            mocha.it('should not return a boolean when passed a boolean', ()=> {
                chai.expect(testScope.boardState(true)).to.not.deep.equal(true);
            });
            mocha.it('should not return an array when passed an array', ()=> {
                chai.expect(testScope.boardState([])).to.not.deep.equal([]);
            });

        });
    });


    mocha.describe('Behaviors @action->boardState::function dispatch', () =>{

        let testAPI = require('../../../../../js/client/src/lib/common-api');

        let data = {
            payload : {},
            type : testLibrary.GET_BOARD_STATE
        };

        testAPI.buildDataFromUrl = sinon.stub().returns(Promise.resolve((resolve, reject) => resolve(data)));
        const action = sinon.spy();
        const dispatch = testAPI.buildDataFromUrl;

        mocha.describe('Assert callback', () => {

            mocha.it('should dispatch the asynchronous action atleast once', (done) => {
                dispatch(action).then((data) => chai.expect(action.called).to.be.true).catch((err) => err);
                done();
            });
            mocha.it('should dispatch the asynchronous action only once', (done) => {
                dispatch(action).then((data) => chai.expect(action.calledOnce).to.be.true).catch((err) => err);
                done();
            });
            mocha.it('should dispatch the asynchronous action and return data', (done) => {
                dispatch(action).then((data) => chai.expect(action.returned(data)).to.deep.equal(data)).catch((err) => err);
                done();
            });

        });
    });


    mocha.describe('Behaviors @action->incrementFlipCount::function', () =>{

        let data = {
            type : testLibrary.INCREMENT_FLIPCOUNT_STATE
        };

        mocha.describe('Assert normal', () => {
            mocha.it('should return an action object with correct members', ()=> {
                chai.expect(testScope.incrementFlipCount({})).to.deep.equal(data);
            });
            mocha.it('should not return an empty object', ()=> {
                chai.expect(testScope.incrementFlipCount({})).to.not.equal({});
            });
            mocha.it('should have object member @type', ()=> {
                chai.expect(testScope.incrementFlipCount({})).to.deep.property('type');
            });
            mocha.it('should not have object member @payload', ()=> {
                chai.expect(testScope.incrementFlipCount({})).to.not.deep.property('payload');
            });

        });

        mocha.describe('Assert error', () => {
            mocha.it('should not return a string when passed a string', ()=> {
                chai.expect(testScope.incrementFlipCount('')).to.not.deep.equal('string');
            });
            mocha.it('should not return a number when passed a number', ()=> {
                chai.expect(testScope.incrementFlipCount(100)).to.not.deep.equal(100);
            });
            mocha.it('should not return a boolean when passed a boolean', ()=> {
                chai.expect(testScope.incrementFlipCount(true)).to.not.deep.equal(true);
            });
            mocha.it('should not return an array when passed an array', ()=> {
                chai.expect(testScope.incrementFlipCount([])).to.not.deep.equal([]);
            });
        });
    });


});




