'use strict';

/**
 * This notation was generated by templates.
 * // -------------------------------------------------
 * GLOBAL FILE NOTATIONS
 * Project of: memory
 * Filename: header.jsx by jimmie
 * Created: 2017-05-31 @ 14:04
 * Product of: memory
 * // -------------------------------------------------
 * Make sure this file is part of its proper namespace
 * and project before moving on.
 * // -------------------------------------------------
 * Code-tags conventionally should be used (See below) :
 * TODO - Something that someone need to do.
 * DOING - Self remind for what you are doing.
 * CONSIDER - Reminder to consider a change or addition.
 * BUG - The below section of a code cause a bug.
 * FIXME - The below section of code need to be fixed.
 * HACK - The below section of code is a workaround.
 * XXX - Any notation important enough to consider implementing.
 * CLARIFY - Very incomprehensible section of code below.
 *
 * Created by jimmie on (2017-05-31).
 *
 * Repository link: project/repository
 */

/**
 * DOING: Import node associated libraries
 * here to separate from the rest of the code.
 */
const moment = require('moment');


/**
 * DOING: Import react and associated libraries
 * here to separate from the rest of the code.
 */
import React, { PureComponent } from 'react';
import { connect } from 'react-redux';


/**
 * DOING: Import universal and associated libraries
 * here to separate from the rest of the code.
 */
import {
    activeGameSelector,
    totalGamesSelector,
    scoreSelector
} from '../../selectors/board';

/**
 * DOING: Import ui and interface libraries and components
 * here to separate from the rest of the code.
 */
import AppBar from 'material-ui/AppBar';
import Drawer from 'material-ui/Drawer';
import Subheader from 'material-ui/Subheader';
import Paper from 'material-ui/Paper';
import Divider from 'material-ui/Divider';
import {
    List,
    ListItem
} from 'material-ui/List';
import Badge from 'material-ui/Badge';
import IconButton from 'material-ui/IconButton';
import NotificationsIcon from 'material-ui/svg-icons/social/notifications';
import PregnantWomanIcon from 'material-ui/svg-icons/action/pregnant-woman';
import HeartIcon from 'material-ui/svg-icons/action/favorite';
import injectTapEventPlugin from 'react-tap-event-plugin';
injectTapEventPlugin();


class Header extends PureComponent {


    constructor(props) {
        super(props);

        this.state = {
            drawerOpen: false,
        };
    }


    /**
     * DOING: Should return n diff
     * in minutes from timestamp in store with now.
     * @returns {number}
     */
    getMinutesInDuration() {
        let startDateAndTime = moment(this.props.board.timestamp);
        let endDateAndTime = moment().add(1, 'minutes');
        return endDateAndTime.diff(startDateAndTime, 'minutes');
    }


    /**
     * DOING: Should return n diff
     * in minutes from timestamp in store with now.
     * @returns {number}
     */
    getHoursInDuration() {
        let startDateAndTime = moment(this.props.board.timestamp);
        let endDateAndTime = moment().add(1, 'minutes');
        return endDateAndTime.diff(startDateAndTime, 'hours');
    }


    /**
     * DOING: Should return the
     * state of interface drawer.
     * @returns {boolean}
     */
    setDrawer() {
        return this.setState({drawerOpen: !this.state.drawerOpen});
    }


    render() {

        const disclaimerText = {
            position:'absolute',
            bottom:'0px',
            fontFamily:'Arial',
            fontSize:'9px',
            textTransform: 'uppercase',
            lineHeight: '1.4em',
            letterSpacing: '1.1px',
            color:'#ccc',
            padding: '25px',
            textAlign:'center',
        };

        const tooltipText = {
            fontFamily:'Arial',
            fontSize:'10px',
            textTransform: 'uppercase',
            lineHeight: '1.2em',
            letterSpacing: '1.1px',
            color:'#ccc',
        };


        return(
            <div>
            <AppBar
                title=""
                onLeftIconButtonTouchTap={() => { this.setDrawer() }}
                titleStyle={{fontSize:'26px'}}
                showMenuIconButton={true}
                iconElementRight={<img className="header-logo" src="https://github.com/jimmiehansson/memory/raw/master/public/images/memoryinja.jpg?raw=true" /> }
                iconElementLeft={
                    <div>
                    <Badge
                    badgeContent={(!this.props.score) ? 0 : this.props.score }
                    secondary={true}
                    badgeStyle={{top: 17, right: 12, backgroundColor: '#8bc53e', fontFamily: 'Bangers', fontSize: '16px', padding:'3px'}}
                    >
                    <IconButton tooltipStyles={tooltipText} tooltipPosition='bottom-right' tooltip="Click to toggle">
                    <NotificationsIcon />
                    </IconButton>
                    </Badge>
                    </div>
                }
            >
                <Drawer open={this.state.drawerOpen} width={200} openSecondary={true}>

                    <List>
                        <Subheader
                        style={{fontFamily: 'Bangers', fontSize: '24px', color: '#666'}}
                        >
                            {`Level ${this.props.activeGame} / ${this.props.totalGames}`}
                        </Subheader>
                        <Divider/>
                        <Subheader>My current score</Subheader>
                        <ListItem disabled={true} style={{fontFamily:'Bangers', fontSize:'43px', color:'#8bc53e', padding: '15px'}}>
                            {`${this.props.score}`}
                        </ListItem>
                        <Divider/>
                        <Subheader>Time spent playing</Subheader>
                        <ListItem disabled={true} style={{fontFamily:'Bangers', fontSize:'22px', color:'#8bc53e', padding: '15px'}}>
                            {`${this.getHoursInDuration()} hours ${this.getMinutesInDuration()} minutes`}
                        </ListItem>
                        <Divider/>
                        <Paper
                            style={disclaimerText}
                        >
                            <IconButton tooltipStyles={tooltipText} iconStyle={{position:'relative', top:'5px', width:'20px', height:'20px'}} tooltip="Nina">
                                <PregnantWomanIcon />
                            </IconButton>
                            +
                            <IconButton tooltipStyles={tooltipText} iconStyle={{position:'relative', top:'3px', width:'16px', height:'16px', color:'red'}} tooltip="Agaton">
                                <HeartIcon />
                            </IconButton>

                            <br />
                            This memory game was made as an assignment for a job interview.
                            Thanks to the developers of React, Redux (redux-thunk) Reselect, Electron, Mocha and many more.
                            Feel free to use this project under the Creative Commons license. See LICENSE file.
                            <br />
                            ---------
                            <br />
                            Jimmie Hansson
                            <br />@ Github
                        </Paper>
                    </List>
                </Drawer>
            </AppBar>
            </div>
        )
    }

}

/**
 * CLARIFY: Mapping the current (initial) state to props
 * initial state set by scope reducer.
 * @param state
 * @param props
 * @returns {{board: (Array|*)}}
 */
const mapStateToProps = (state, props) => {
   return {
       board : state.board,
       activeGame : activeGameSelector(state),
       totalGames : totalGamesSelector(state),
       score : scoreSelector(state),
   }
};


export default connect(mapStateToProps)(Header);