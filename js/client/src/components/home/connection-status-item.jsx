'use strict';

/**
 * This notation was generated by templates.
 * // -------------------------------------------------
 * GLOBAL FILE NOTATIONS
 * Project of: fix
 * Filename: connection-status-item.jsx by jimmie
 * Created: 2017-05-23 @ 15:16
 * Product of: WebStorm
 * // -------------------------------------------------
 * Make sure this file is part of its proper namespace
 * and project before moving on.
 * // -------------------------------------------------
 * Code-tags conventionally should be used (See below) :
 * TODO - Something that someone need to do.
 * DOING - Self remind for what you are doing.
 * CONSIDER - Reminder to consider a change or addition.
 * BUG - The below section of a code cause a bug.
 * FIXME - The below section of code need to be fixed.
 * HACK - The below section of code is a workaround.
 * XXX - Any notation important enough to consider implementing.
 * CLARIFY - Very incomprehensible section of code below.
 *
 * Created by jimmie on (2017-06-23).
 *
 * Repository link: http://jimmie@gitlab.localdomain/connectiontool/fix.git
 */

/**
 * DOING: Import react and associated libraries
 * here to separate from the rest of the code.
 */
import React from 'react';


/**
 * DOING: Import app associated and universal libraries
 * here to separate from the rest of the code.
 */
import {
    isLoading
} from '../..//lib/common-state.js';
import * as language from '../..//constants/language/swedish';
import {
    LIST_AVATAR_ACTIVE_GREEN,
    LIST_AVATAR_ACTIVE_RED,
    LIST_AVATAR_STANDARD_BACKGROUND,
    LIST_SECONDARY_TEXT_ACTIVE_BLACK
} from '../..//constants/common-ui.js';

/**
 * DOING: Import material ui and interface
 * here to separate from the rest of the code.
 */
import {
    ListItem,
} from 'material-ui/List';
import {
    GridList,
    GridTile
} from 'material-ui/GridList';
import Avatar from 'material-ui/Avatar';
import CircularProgress from 'material-ui/CircularProgress';
import Divider from 'material-ui/Divider';
import Check from 'material-ui/svg-icons/navigation/check';
import AlarmOn from 'material-ui/svg-icons/action/alarm-on';
import TrendingUp from 'material-ui/svg-icons/action/trending-up';
import TrendingDown from 'material-ui/svg-icons/action/trending-down';
import ErrorOutline from 'material-ui/svg-icons/alert/error-outline';
import Router from 'material-ui/svg-icons/hardware/router';
import {
    green400,
    redA400,
    darkBlack
} from 'material-ui/styles/colors';


const ConnectionStatusItem = props => {

    /**
     * DOING: Elements of the interface should
     * evaluate the connection state and reflect such.
     * Any elements should also fall back to native colors
     * if necessary.
     * @type {{backgroundColor, color: string}}
     */

    // Component secondaryText
    const defaultSpanStyle = {
        color: darkBlack || LIST_SECONDARY_TEXT_ACTIVE_BLACK,
        fontSize: '12px'
    };

    // Success style
    const successStyle = {
        color: green400 || LIST_AVATAR_ACTIVE_GREEN,
        backgroundColor: LIST_AVATAR_STANDARD_BACKGROUND || '#fff',
        rightIcon: <Check />,
        leftIcon: <Router />
    };

    // Error style
    const errorStyle = {
        color: redA400 || LIST_AVATAR_ACTIVE_RED,
        backgroundColor: LIST_AVATAR_STANDARD_BACKGROUND || '#fff',
        rightIcon: <ErrorOutline />,
        leftIcon: <Router />
    };

    // Evaluate
    const evaluateStyle = {
        color: (props.alive) ? successStyle.color : errorStyle.color,
        backgroundColor: (props.alive) ? successStyle.backgroundColor : errorStyle.backgroundColor,
        rightIcon: (props.alive) ? successStyle.rightIcon : errorStyle.rightIcon,
        leftIcon: (props.alive) ? successStyle.leftIcon : errorStyle.leftIcon,
    };

    // Loading condition
    let loading = {
        ms : isLoading(
                props.values.loading,
                <CircularProgress size={12} thickness={2.5} color={green400} />,
                `${props.values.ms}${language.SYSTEM_NETWORK_MS} ${language.NETWORK_DEVICE_RESPONSE_TIME}`
        ),
        avg : isLoading(
                props.values.loading,
                <CircularProgress size={12} thickness={2.5} color={green400} />,
                `${Math.round(props.values.avg)}${language.SYSTEM_NETWORK_MS} ${language.NETWORK_DEVICE_RESPONSE_TIME}`
        ),
        min : isLoading(
                props.values.loading,
                <CircularProgress size={12} thickness={2.5} color={green400} />,
                `${Math.round(props.values.min)}${language.SYSTEM_NETWORK_MS} ${language.NETWORK_DEVICE_RESPONSE_MINIMUM_TIME}`
        ),
        max : isLoading(
                props.values.loading,
                <CircularProgress size={12} thickness={2.5} color={green400} />,
                `${Math.round(props.values.max)}${language.SYSTEM_NETWORK_MS} ${language.NETWORK_DEVICE_RESPONSE_MAXIMUM_TIME}`
        ),
    };

    return (
        <div style={{display:'flex', flexWrap:'wrap', justifyContent:'space-around'}}>

            <ListItem
                primaryText=''
                disabled={true}
                leftAvatar={
                    <Avatar icon={evaluateStyle.leftIcon}
                            color={darkBlack}
                            backgroundColor={evaluateStyle.backgroundColor}
                    />}

            >
                <GridList cellHeight={90} style={{minWidth:'600px'}} cols={4}>
                    <GridTile
                        title={props.address}
                        key='{props.address+props.index}'
                        style={{backgroundColor:'#fff', display: 'flex', justifyContent: 'space-around', textAlign:'center'}}
                    >
                        <Avatar icon={evaluateStyle.rightIcon}
                                color={evaluateStyle.color}
                                backgroundColor={'transparent'}
                                style={{display:'inline-flex', verticalAlign:'middle', alignItems:'center'}}
                        />
                    </GridTile>
                    <GridTile
                        title={loading.ms}
                        key='{props.address+props.index+1}'
                        style={{backgroundColor:'#fff', display: 'flex', justifyContent: 'space-around', textAlign:'center'}}>
                        <Avatar icon={<AlarmOn />}
                                color={evaluateStyle.color}
                                backgroundColor={'transparent'}
                                style={{display:'inline-flex', verticalAlign:'middle', alignItems:'center'}}
                        /> Nu
                    </GridTile>
                    <GridTile
                        title={loading.min}
                        key='{props.address+props.index+2}'
                        style={{backgroundColor:'#fff', display: 'flex', justifyContent: 'space-around', textAlign:'center'}}>
                        <Avatar icon={<TrendingDown />}
                                color={evaluateStyle.color}
                                backgroundColor={'transparent'}
                                style={{display:'inline-flex', verticalAlign:'middle', alignItems:'center'}}
                        />
                        Snabbast
                    </GridTile>
                    <GridTile
                        title={loading.max}
                        key='{props.address+props.index+3}'
                        style={{backgroundColor:'#fff', display: 'flex', justifyContent: 'space-around', textAlign:'center'}}>
                        <Avatar icon={<TrendingUp />}
                                color={evaluateStyle.color}
                                backgroundColor={'transparent'}
                                style={{display:'inline-flex', verticalAlign:'middle', alignItems:'center'}}
                        />
                        LÃ¤ngst
                    </GridTile>
                </GridList>

                <Divider/>
            </ListItem>
        </div>
    )
};

export default ConnectionStatusItem;