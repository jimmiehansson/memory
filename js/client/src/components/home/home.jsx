'use strict';

/**
 * This notation was generated by templates.
 * // -------------------------------------------------
 * GLOBAL FILE NOTATIONS
 * Project of: fix
 * Filename: home.component.jsx by jimmie
 * Created: 2017-03-09 @ 14:04
 * Product of: WebStorm
 * // -------------------------------------------------
 * Make sure this file is part of its proper namespace
 * and project before moving on.
 * // -------------------------------------------------
 * Code-tags conventionally should be used (See below) :
 * TODO - Something that someone need to do.
 * DOING - Self remind for what you are doing.
 * CONSIDER - Reminder to consider a change or addition.
 * BUG - The below section of a code cause a bug.
 * FIXME - The below section of code need to be fixed.
 * HACK - The below section of code is a workaround.
 * XXX - Any notation important enough to consider implementing.
 * CLARIFY - Very incomprehensible section of code below.
 *
 * Created by jimmie on (2017-03-09).
 *
 * Repository link: project/repository
 */

/**
 * DOING: Import react and associated libraries
 * here to separate from the rest of the code.
 */
import React, { Component } from 'react';
import { connect } from 'react-redux';
import * as homeActions from '../../actions/home';
import { populate } from '../../store/populate-state';
import { networkSelector } from '../../selectors/home';


/**
 * DOING: Import custom components and stateless helpers
 * here to separate from the rest of the code.
 */
import CardBoard from './cardboard.jsx';
//
/**
 * DOING: Import ui and interface libraries and components
 * here to separate from the rest of the code.
 */
import {
    Card,
    CardText
} from 'material-ui/Card';


class Home extends Component {

    constructor(props){

        super(props);
    }

    handleToggle = (event, toggle) => {

        // Set this in initial state
        // switch to reducer init state
        // once this is finished
        let payload = populate.load();
        this.props.preloadState(payload);
    };

     lineChartConnectionState = () => this.lineChartConnectionStateData;



    render() {

        return(
            <div>

                <Card>
                    <CardText style={{fontSize: '13px'}}>
                        <CardBoard {...this.props} />
                    </CardText>
                </Card>
            </div>
        )
    };
}


/**
 * CLARIFY: Mapping the current (initial) state to props
 * initial state set by scope reducer.
 * @param state
 * @param props
 * @returns {{home: (Array|*)}}
 */
const mapStateToProps = (state, props) => {
    return {
        home: state.home,
        network: networkSelector(state.home.network),
    }
};


/**
 * CLARIFY: Returning dispatched action state for
 * getInitialConnection.
 * @param dispatch
 * @returns {{getInitialConnection: (function(*=): *)}}
 */
const mapDispatchToProps = (dispatch) => {

    return {
        preloadState: payload => dispatch(homeActions.preloadState(payload)),

    }

};


export default connect(mapStateToProps, mapDispatchToProps)(Home);