'use strict';

/**
 * This notation was generated by templates.
 * // -------------------------------------------------
 * GLOBAL FILE NOTATIONS
 * Project of: fix
 * Filename: board.jsx by jimmie
 * Created: 2017-05-31 @ 15:16
 * Product of: WebStorm
 * // -------------------------------------------------
 * Make sure this file is part of its proper namespace
 * and project before moving on.
 * // -------------------------------------------------
 * Code-tags conventionally should be used (See below) :
 * TODO - Something that someone need to do.
 * DOING - Self remind for what you are doing.
 * CONSIDER - Reminder to consider a change or addition.
 * BUG - The below section of a code cause a bug.
 * FIXME - The below section of code need to be fixed.
 * HACK - The below section of code is a workaround.
 * XXX - Any notation important enough to consider implementing.
 * CLARIFY - Very incomprehensible section of code below.
 *
 * Created by jimmie on (2017-05-31).
 *
 * Repository link: https://github.com/jimmiehansson/memory.git
 */


/**
 * DOING: Import react and associated libraries
 * here to separate from the rest of the code.
 */
import React, {PureComponent} from 'react';
import { connect } from 'react-redux';
import * as boardActions from '../../actions/board';


/**
 * DOING: Import react components here
 * to separate from the rest of the code.
 */
import Tile from './tile.jsx';


/**
 * DOING: Import ui and interface libraries and components
 * here to separate from the rest of the code.
 */
import {
    Card,
    CardText
} from 'material-ui/Card';


class Board extends PureComponent {

    constructor(props) {
        super(props);
    }


    // Lets move the logic over here to keep the cardtile stateless
    // and purify this component as well once we're done





    render() {

        return (
            <div>
                <Card>
                    <CardText style={{fontSize: '13px'}}>
                        <div style={{display: 'flex', flexWrap: 'wrap', justifyContent: 'space-around'}}>
                            <Tile key={1} index={1} props={this.props} />
                            <Tile key={2} index={2} props={this.props} />
                            <Tile key={3} index={3} props={this.props} />
                            <Tile key={4} index={4} props={this.props} />
                            <Tile key={5} index={5} props={this.props} />
                            <Tile key={6} index={6} props={this.props} />
                            <Tile key={7} index={7} props={this.props} />
                            <Tile key={8} index={8} props={this.props} />
                            <Tile key={9} index={9} props={this.props} />
                            <Tile key={10} index={10} props={this.props} />
                            <Tile key={11} index={11} props={this.props} />
                            <Tile key={12} index={12} props={this.props} />
                            <Tile key={13} index={13} props={this.props} />
                            <Tile key={14} index={14} props={this.props} />
                            <Tile key={15} index={15} props={this.props} />
                        </div>
                    </CardText>
                </Card>
            </div>

        )
    }
};




/**
 * CLARIFY: Mapping the current (initial) state to props
 * initial state set by scope reducer.
 * @param state
 * @param props
 * @returns {{cardboard: (Array|*)}}
 */
const mapStateToProps = (state, props) => {
    return {
        board : state.board,
    }
};


/**
 * CLARIFY: Returning dispatched action state for
 * cardBoardState.
 * @param dispatch
 * @returns {{cardBoardState: (function(*=): *)}}
 */
const mapDispatchToProps = (dispatch) => {
    return {
        boardState : payload => dispatch(boardActions.boardState(payload))
    };
};



export default connect(mapStateToProps, mapDispatchToProps)(Board);