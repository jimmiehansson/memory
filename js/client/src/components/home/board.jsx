'use strict';

/**
 * This notation was generated by templates.
 * // -------------------------------------------------
 * GLOBAL FILE NOTATIONS
 * Project of: fix
 * Filename: board.jsx by jimmie
 * Created: 2017-05-31 @ 15:16
 * Product of: WebStorm
 * // -------------------------------------------------
 * Make sure this file is part of its proper namespace
 * and project before moving on.
 * // -------------------------------------------------
 * Code-tags conventionally should be used (See below) :
 * TODO - Something that someone need to do.
 * DOING - Self remind for what you are doing.
 * CONSIDER - Reminder to consider a change or addition.
 * BUG - The below section of a code cause a bug.
 * FIXME - The below section of code need to be fixed.
 * HACK - The below section of code is a workaround.
 * XXX - Any notation important enough to consider implementing.
 * CLARIFY - Very incomprehensible section of code below.
 *
 * Created by jimmie on (2017-05-31).
 *
 * Repository link: https://github.com/jimmiehansson/memory.git
 */


/**
 * DOING: Import react and associated libraries
 * here to separate from the rest of the code.
 */
import React, {PureComponent} from 'react';
import { connect } from 'react-redux';
import * as boardActions from '../../actions/board';

/**
 * DOING: Import react components here
 * to separate from the rest of the code.
 */
import TileWrapper from './tile-wrapper.jsx';


/**
 * DOING: Import universal and associated libraries
 * here to separate from the rest of the code.
 */
import {
    isNumber,
    isDefined,
    isArray
} from '../../lib/common-type';
import {
    sessionsSelector,
    activeGameSelector
} from '../../selectors/board';


/**
 * DOING: Import ui and interface libraries and components
 * here to separate from the rest of the code.
 */
import {
    Card,
    CardText
} from 'material-ui/Card';


class Board extends PureComponent {


    constructor(props) {
        super(props);

        this.counter = 0;
        this.matchingTiles = [];
        this.locked = false;
    }


    /**
     * DOING: Should reset the board triggered
     * by the function. Resets the state by dispatch.
     *
     */
    triggerResetBoard() {

        setTimeout(() => {
            Object.keys(this.props.games[`session${this.props.activeGame}`]).forEach((item) => {
                this.props.games[`session${this.props.activeGame}`][item].flipped = !!(this.props.games[`session${this.props.activeGame}`][item].matched);
            });

            this.resetHelpers();
            if(this.getCounter() <= 2) {
            this.props.boardState(this.props.games);
            }

            this.triggerUnlockBoard();
        },2000);
    }


    /**
     * DOING: Should reset common
     * functions to their initial
     * values.
     */
    resetHelpers(){
        this.resetMatchingTiles();
        this.resetCounter();
    }


    /**
     * DOING: Should lock the board triggered
     * by the function.
     */
    triggerLockBoard() {
        this.locked = true;
    }


    /**
     * DOING: Should unlock the board triggered
     * by the function.
     */
    triggerUnlockBoard() {
        this.locked = false;
    }


    /**
     * DOING: Should return status of
     * the state in the locked member.
     * @returns {boolean}
     */
    getLocked() {
        return this.locked;
    }


    /**
     * DOING: Should increment the counter
     * by one numeral literal.
     */
    doIncrementCounter() {
        if(this.counter < 2) {
            ++this.counter;
        }
    }


    /**
     * DOING: Should reset the counter
     * to zero (its initial state).
     */
    resetCounter() {
        this.counter = 0;
    }


    /**
     * DOING: Should get the current counter
     * value and return it.
     */
    getCounter() {
        (isDefined(this.counter) && isNumber(this.counter));
        return this.counter;
    }


    /**
     * DOING: Should update tiles of match
     * to proper state and return.
     */
    triggerMatchUpdate(){
        this.triggerResetBoard();
    }


    /**
     * DOING: Should reset the array containing
     * matches of the tiles to an empty state.
     */
    resetMatchingTiles() {
        this.matchingTiles = [];
    }


    /**
     * DOING: Should add the current tile
     * to the matches array.
     * @param data
     */
    setMatchingTiles(data) {
        (isDefined(data) && isArray(data));
        this.matchingTiles.push(data);
    }


    /**
     * DOING: Should set matched property
     * to true in the state object.
     * @param payloadId
     */
    setMatched(payloadId) {
        (isDefined(payloadId) && isNumber(payloadId));
        this.props.games[`session${this.props.activeGame}`][`tile${payloadId}`].matched = true;
        this.props.decrementFlipCount();
    }


    /**
     * DOING: Should return the matchingTiles
     * array in complete.
     */
    getMatchingTiles() {
        (isDefined(this.matchingTiles) && isArray(this.matchingTiles));
        return this.matchingTiles;
    }


    /**
     * DOING: Returns new state after
     * dispatching new payload to the
     * store.
     * @param payload
     */
    dispatchState(payload) {
        this.props.boardState(payload);
    }


    /**
     * DOING: Dispatches a new payload when the tile
     * triggers onClick. Should return a new state
     * for the child component while stateless render
     * an update for the store.
     * @param payloadId
     */
    triggerDispatch(payloadId) {


        // Update the board component logic
        // to match that of the new store object
        // 1. Set a session object
        // 2. Check what session it is
        // 3. Update cursors to match the new path in the store object
        // 4. When all are set to matched in the first session node end it
        // 5. Start session 2 with 10 new tiles, all set matched to false


        (isNumber(payloadId) && isDefined(payloadId));

        this.props.boardState(this.props.board);

        this.doIncrementCounter();

        // Increment per click for score keeping
        this.props.incrementFlipCount();

        // Dispatch initial flipped state
        this.props.games[`session${this.props.activeGame}`][`tile${payloadId}`].flipped = !(this.props.games[`session${this.props.activeGame}`][`tile${payloadId}`].matched);
        this.dispatchState(this.props.games[`session${this.props.activeGame}`]);

        /**
         * Should add the current tile to the
         * array for matching.
         */
        this.setMatchingTiles(this.props.games[`session${this.props.activeGame}`][`tile${payloadId}`]);

        /**
         * Should if 2 tiles are flipped, check them
         * if they match. Return the proper state
         * if match or not.
         */
        if(this.getCounter()===2 || this.getMatchingTiles().length===2) {

            this.triggerLockBoard();

            /**
             * Return the n of matched tiles
             */
            let getMatch = this.getMatchingTiles().reduce((acm, val) => acm + (val.name === this.props.games[`session${this.props.activeGame}`][`tile${payloadId}`].name), 0);

            if (getMatch === 2) {
                this.getMatchingTiles().forEach((item) => this.setMatched(item.index));
                this.triggerMatchUpdate();
            }
            else {
                this.triggerUnlockBoard();
            }

            this.triggerResetBoard();
        }

        /**
         * Should return the total amount of tiles
         * that have matched set to true.
         * On return, dispatch to increment the game session
         * number by one numeral.
         * @type {*}
         */
        let setGameSession =
            Object.values(this.props.games[`session${this.props.activeGame}`]).reduce((total, val) => total + (val.matched===true), 0);

        if(
            setGameSession===Object.keys(this.props.games[`session${this.props.activeGame}`]).length &&
            this.props.activeGame < Object.keys(this.props.games).length
        ){
            // Add some user feedback here
            this.props.incrementActiveGame(this.props);
        }
    }


    render() {
        return (
            <div>
                <Card>
                    <CardText style={{fontSize: '13px'}}>
                        <div className="flexWrapper" style={{display: 'flex', flexWrap: 'wrap', justifyContent: 'space-around'}}>
                            {
                                (this.props.games)
                                ?
                                    Object.keys(this.props.games[`session${this.props.activeGame}`]).map((tile) => {

                                        return <div
                                            key={`triggerWrapper${this.props.games[`session${this.props.activeGame}`][tile].index}`}
                                            className="tileWrapper"
                                            onClick={
                                                (!this.getLocked() && this.getCounter() < 2 && !this.props.games[`session${this.props.activeGame}`][tile].matched && !this.props.games[`session${this.props.activeGame}`][tile].flipped)
                                                    ?
                                                    () => {
                                                        this.triggerDispatch(this.props.games[`session${this.props.activeGame}`][tile].index)
                                                    }
                                                    : () => {
                                                    if(this.getLocked()){
                                                        alert('too fast, calm down');
                                                    }
                                                    this.triggerResetBoard();
                                                }
                                            }
                                        >
                                            <TileWrapper
                                                key={`tileWrapper${this.props.games[`session${this.props.activeGame}`][tile].index}`}
                                                index={this.props.games[`session${this.props.activeGame}`][tile].index}
                                                {...this.props.games[`session${this.props.activeGame}`][tile]}
                                            />
                                        </div>
                                    })

                                    : <div>
                                    Loading....
                                </div>
                            }
                        </div>
                    </CardText>
                </Card>
            </div>

        )
    }
}


/**
 * CLARIFY: Mapping the current (initial) state to props
 * initial state set by scope reducer.
 * @param state
 * @param props
 * @returns {{board: (Array|*)}}
 */
const mapStateToProps = (state, props) => {

    return {
        board : state.board,
        games : sessionsSelector(state),
        activeGame : activeGameSelector(state),
    }
};


/**
 * CLARIFY: Returning dispatched action state for
 * boardState.
 * @param dispatch
 * @returns {{boardState: (function(*=): *)}}
 */
const mapDispatchToProps = (dispatch) => {
    return {
        boardState : payload => dispatch(boardActions.boardState(payload)),
        dataToBoard : payload => dispatch(boardActions.dataToBoard(payload)),
        incrementFlipCount : payload => dispatch(boardActions.incrementFlipCount(payload)),
        decrementFlipCount : payload => dispatch(boardActions.decrementFlipCount(payload)),
        incrementActiveGame : payload => dispatch(boardActions.incrementActiveGame(payload))
    };
};



export default connect(mapStateToProps, mapDispatchToProps)(Board);