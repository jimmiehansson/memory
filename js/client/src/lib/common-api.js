'use strict';

/**
 * This notation was generated by templates.
 * // -------------------------------------------------
 * GLOBAL FILE NOTATIONS
 * Project of: memory
 * Filename: common-api.js by jimmie
 * Created: 2017-05-31 @ 15:16
 * Product of: WebStorm
 * // -------------------------------------------------
 * Make sure this file is part of its proper namespace
 * and project before moving on.
 * // -------------------------------------------------
 * Code-tags conventionally should be used (See below) :
 * TODO - Something that someone need to do.
 * DOING - Self remind for what you are doing.
 * CONSIDER - Reminder to consider a change or addition.
 * BUG - The below section of a code cause a bug.
 * FIXME - The below section of code need to be fixed.
 * HACK - The below section of code is a workaround.
 * XXX - Any notation important enough to consider implementing.
 * CLARIFY - Very incomprehensible section of code below.
 *
 * Created by jimmie on (2017-06-31).
 *
 * Repository link: https://github.com/jimmiehansson/memory.git
 */


/**
 * Import universal/associated libraries
 * here to separate from other code.
 */
import fetch from 'isomorphic-fetch';
import {
    BAD_REQUEST
} from '../constants/language/english';
import {
    API_FETCH_URL
} from '../constants/common-application';


/**
 * DOING: Should wrap fetch request
 * function and return json object.
 * @param url
 * @returns object
 */
export const fetchFromUrl = (url = API_FETCH_URL) => fetch(url)
    .then((response) => (response.status < 200 || response.status > 400) ? () => { throw new Error(BAD_REQUEST); } : response.json())
    .then((data)=> data)
    .catch((error) => error);


/**
 * DOING: Should iterate and validate
 * the returned data from the url fetch.
 * Data should match the normalized structure
 * of the state object and return.
 * @returns object
 */
export const buildDataFromUrl = () => {


    let iterator = 0;
    let sessions = 0;
    let fiveObjects = {};
    let mergedFiveObjects = {};
    let fiveObjectsCopy = {};
    let tiles = {};


    fetchFromUrl(API_FETCH_URL).then((dataFromUrl) => {

        /**
         * Should map the fetched data and validate.
         * Returns mapped object where n value % 5 === 0
         */
        Object.keys(dataFromUrl).forEach((item, index) => {

            ++iterator;

            if(
                dataFromUrl[item].hasOwnProperty('name') &&
                dataFromUrl[item].hasOwnProperty('imagePortraitUrl') &&
                dataFromUrl[item].hasOwnProperty('index') &&
                dataFromUrl[item].hasOwnProperty('filename')
            ) {

                /**
                 * If iterator reaches 5 iterations
                 * increment the sessions counter.
                 */
                if(iterator===5) { iterator = 0; ++sessions; }

                /**
                 * Add these 5 objects as object
                 * properties for each session board.
                 */
                for(let x = 0; x <= 5; x++) { tiles[`tile${dataFromUrl[item].index}`] = dataFromUrl[item]; }


                if(Object.keys(tiles).length === 5) {

                    fiveObjects[`session${sessions}`] = { tiles };
                    fiveObjectsCopy[`session${sessions}`] = fiveObjects;


                    let o = tiles[`tile${dataFromUrl[item].index}`].index;
                    let x = 0;

                    for(; x < 5; ++x){

                        ++o;

                        tiles[`tile${o}`] = {
                                name : dataFromUrl[item].name,
                                imagePortraitUrl : dataFromUrl[item].imagePortraitUrl,
                                index : o,
                                filename : dataFromUrl[item].filename,
                                flipped : false,
                                matched : false,
                            };


                    }

                    fiveObjectsCopy[`session${sessions}`] = { tiles };
                    mergedFiveObjects = Object.assign(fiveObjects, fiveObjectsCopy);

                    tiles = {};
                }

            }
        });

    });

    // 6. loop that object
    // 7. build a new object using the index from the loop, index should now be 1-10
    // 8. do this until all 134 items are done
    // 9. return the object to the state

    console.log(fiveObjectsCopy);
};