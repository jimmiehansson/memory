'use strict';

/**
 * This notation was generated by templates.
 * // -------------------------------------------------
 * GLOBAL FILE NOTATIONS
 * Project of: memory
 * Filename: tile.js by jimmie
 * Created: 2017-05-31 @ 14:54
 * Product of: memory
 * // -------------------------------------------------
 * Make sure this file is part of its proper namespace
 * and project before moving on.
 * // -------------------------------------------------
 * Code-tags conventionally should be used (See below) :
 * TODO - Something that someone need to do.
 * DOING - Self remind for what you are doing.
 * CONSIDER - Reminder to consider a change or addition.
 * BUG - The below section of a code cause a bug.
 * FIXME - The below section of code need to be fixed.
 * HACK - The below section of code is a workaround.
 * XXX - Any notation important enough to consider implementing.
 * CLARIFY - Very incomprehensible section of code below.
 *
 * Created by jimmie on (2017-05-31).
 *
 * Repository link: https://github.com/jimmiehansson/memory.git
 */


/**
 * DOING: Import app associated and universal libraries
 * here to separate from the rest of the code.
 */
import {
    GET_BOARD_STATE,
    GET_DATA_TO_BOARD,
    INCREMENT_FLIPCOUNT_STATE,
    DECREMENT_FLIPCOUNT_STATE,
    INCREMENT_ACTIVEGAME_STATE
} from '../constants/action-types/board.js';

import {
    buildDataFromUrl
} from '../lib/common-api';



/**
 * DOING: Card tiles state should be
 * stored to render the proper tiles.
 * @param payload
 * @returns {{type, payload: *}}
 */
export const getBoardState = (payload) => {
    return {
        type: GET_BOARD_STATE,
        payload
    };
};


/**
 * DOING: Fetches the state and content
 * for the tiles.
 * @param payload
 * @returns {function(*)}
 */
export const boardState = (payload) => {

    return (dispatch) => {
        dispatch(getBoardState(payload));
    };
};


/**
 * DOING: Data state should be
 * stored and rendered to the tiles.
 * @param payload
 * @returns {{type: *, payload: *}}
 */
export const getDataToBoard = (payload) => {
    return {
        type: GET_DATA_TO_BOARD,
        payload
    };
};


/**
 * DOING: Fetch data from url to board
 * and dispatch the data to state object.
 * @param payload
 * @returns {function(*)}
 */
export const dataToBoard = (payload) => {
    return (dispatch) => {
        buildDataFromUrl().then(data => {
            payload = {
                score : 0,
                flipCount : 0,
                activeGame : 1,
                sessions : {...data}
            };
            dispatch(getDataToBoard(payload));
        });
    };
};


/**
 * DOING: Flip count should increment
 * by one if the action has been triggered.
 * @returns {{type: *, payload: *}}
 */
export const incrementFlipCount = () => {
    return {
        type: INCREMENT_FLIPCOUNT_STATE,
    };
};


/**
 * DOING: Flip count should decrement
 * by one if the action has been triggered.
 * @param payload
 * @returns {{type: *, payload: *}}
 */
export const decrementFlipCount = (payload) => {
   return {
       type: DECREMENT_FLIPCOUNT_STATE,
       payload: payload,
   };
};


/**
 * DOING: Session count should increment
 * by one if the action has been triggered.
 * @returns {{type: *, payload: *}}
 */
export const incrementActiveGame = () => {
    return {
        type: INCREMENT_ACTIVEGAME_STATE,
    };
};
